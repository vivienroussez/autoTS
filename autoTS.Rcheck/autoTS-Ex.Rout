
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "autoTS"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "autoTS-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('autoTS')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("complete.ts")
> ### * complete.ts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: complete.ts
> ### Title: Creates additional dates and values when NA where removed and
> ###   the TS is not complete
> ### Aliases: complete.ts
> 
> ### ** Examples
> 
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> dates <- seq(as_date("2000-01-01"),as_date("2010-12-31"),"month")
> values <- rnorm(length(dates))
> complete.ts(dates,values,"month",complete = 0)
         dates          val
1   2000-01-01 -0.626453811
2   2000-02-01  0.183643324
3   2000-03-01 -0.835628612
4   2000-04-01  1.595280802
5   2000-05-01  0.329507772
6   2000-06-01 -0.820468384
7   2000-07-01  0.487429052
8   2000-08-01  0.738324705
9   2000-09-01  0.575781352
10  2000-10-01 -0.305388387
11  2000-11-01  1.511781168
12  2000-12-01  0.389843236
13  2001-01-01 -0.621240581
14  2001-02-01 -2.214699887
15  2001-03-01  1.124930918
16  2001-04-01 -0.044933609
17  2001-05-01 -0.016190263
18  2001-06-01  0.943836211
19  2001-07-01  0.821221195
20  2001-08-01  0.593901321
21  2001-09-01  0.918977372
22  2001-10-01  0.782136301
23  2001-11-01  0.074564983
24  2001-12-01 -1.989351696
25  2002-01-01  0.619825748
26  2002-02-01 -0.056128740
27  2002-03-01 -0.155795507
28  2002-04-01 -1.470752384
29  2002-05-01 -0.478150055
30  2002-06-01  0.417941560
31  2002-07-01  1.358679552
32  2002-08-01 -0.102787727
33  2002-09-01  0.387671612
34  2002-10-01 -0.053805041
35  2002-11-01 -1.377059557
36  2002-12-01 -0.414994563
37  2003-01-01 -0.394289954
38  2003-02-01 -0.059313397
39  2003-03-01  1.100025372
40  2003-04-01  0.763175748
41  2003-05-01 -0.164523596
42  2003-06-01 -0.253361680
43  2003-07-01  0.696963375
44  2003-08-01  0.556663199
45  2003-09-01 -0.688755695
46  2003-10-01 -0.707495157
47  2003-11-01  0.364581962
48  2003-12-01  0.768532925
49  2004-01-01 -0.112346212
50  2004-02-01  0.881107726
51  2004-03-01  0.398105880
52  2004-04-01 -0.612026393
53  2004-05-01  0.341119691
54  2004-06-01 -1.129363096
55  2004-07-01  1.433023702
56  2004-08-01  1.980399899
57  2004-09-01 -0.367221476
58  2004-10-01 -1.044134626
59  2004-11-01  0.569719627
60  2004-12-01 -0.135054604
61  2005-01-01  2.401617761
62  2005-02-01 -0.039240003
63  2005-03-01  0.689739362
64  2005-04-01  0.028002159
65  2005-05-01 -0.743273209
66  2005-06-01  0.188792300
67  2005-07-01 -1.804958629
68  2005-08-01  1.465554862
69  2005-09-01  0.153253338
70  2005-10-01  2.172611670
71  2005-11-01  0.475509529
72  2005-12-01 -0.709946431
73  2006-01-01  0.610726353
74  2006-02-01 -0.934097632
75  2006-03-01 -1.253633400
76  2006-04-01  0.291446236
77  2006-05-01 -0.443291873
78  2006-06-01  0.001105352
79  2006-07-01  0.074341324
80  2006-08-01 -0.589520946
81  2006-09-01 -0.568668733
82  2006-10-01 -0.135178615
83  2006-11-01  1.178086997
84  2006-12-01 -1.523566800
85  2007-01-01  0.593946188
86  2007-02-01  0.332950371
87  2007-03-01  1.063099837
88  2007-04-01 -0.304183924
89  2007-05-01  0.370018810
90  2007-06-01  0.267098791
91  2007-07-01 -0.542520031
92  2007-08-01  1.207867806
93  2007-09-01  1.160402616
94  2007-10-01  0.700213650
95  2007-11-01  1.586833455
96  2007-12-01  0.558486426
97  2008-01-01 -1.276592208
98  2008-02-01 -0.573265414
99  2008-03-01 -1.224612615
100 2008-04-01 -0.473400636
101 2008-05-01 -0.620366677
102 2008-06-01  0.042115873
103 2008-07-01 -0.910921649
104 2008-08-01  0.158028772
105 2008-09-01 -0.654584644
106 2008-10-01  1.767287269
107 2008-11-01  0.716707476
108 2008-12-01  0.910174229
109 2009-01-01  0.384185358
110 2009-02-01  1.682176081
111 2009-03-01 -0.635736454
112 2009-04-01 -0.461644730
113 2009-05-01  1.432282239
114 2009-06-01 -0.650696353
115 2009-07-01 -0.207380744
116 2009-08-01 -0.392807929
117 2009-09-01 -0.319992869
118 2009-10-01 -0.279113303
119 2009-11-01  0.494188331
120 2009-12-01 -0.177330482
121 2010-01-01 -0.505957462
122 2010-02-01  1.343038825
123 2010-03-01 -0.214579409
124 2010-04-01 -0.179556530
125 2010-05-01 -0.100190741
126 2010-06-01  0.712666307
127 2010-07-01 -0.073564404
128 2010-08-01 -0.037634171
129 2010-09-01 -0.681660479
130 2010-10-01 -0.324270272
131 2010-11-01  0.060160440
132 2010-12-01 -0.588894486
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("complete.ts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:dplyr’, ‘package:lubridate’

> nameEx("getBestModel")
> ### * getBestModel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getBestModel
> ### Title: Determine best algorithm
> ### Aliases: getBestModel
> 
> ### ** Examples
> 
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> dates <- seq(lubridate::as_date("2005-01-01"),lubridate::as_date("2010-12-31"),"month")
> values <- 10+ 1:length(dates)/10 + rnorm(length(dates),mean = 0,sd = 10)
> ## Not run: 
> ##D which.model <- getBestModel(dates,values,freq = "month",n_test = 9)
> ## End(Not run)
> ### Custom set of algorithm (including for bagged estimator)
> ## Not run: 
> ##D which.model <- getBestModel(dates,values,freq = "month",n_test = 6,
> ##D                             algos = list("my.prophet","my.ets"),bagged = "custom")
> ##D                             
> ## End(Not run)
> ### Use MAE instead of RMSE
> ## Not run: 
> ##D which.model <- getBestModel(dates,values,freq = "month",n_test = 6,
> ##D                             algos = list("my.prophet","my.ets"),
> ##D                             bagged = "custom",metric.error = my.mae)
> ##D                             
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getBestModel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’, ‘package:lubridate’

> nameEx("getFrequency")
> ### * getFrequency
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getFrequency
> ### Title: Determines the decimal frequency of a time series from a
> ###   character string
> ### Aliases: getFrequency
> 
> ### ** Examples
> 
> getFrequency("week")
[1] 52.17857
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getFrequency", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("my.bats")
> ### * my.bats
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: my.bats
> ### Title: Fit BATS algorithm and make the prediction
> ### Aliases: my.bats
> 
> ### ** Examples
> 
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> dates <- seq(as_date("2000-01-01"),as_date("2010-12-31"),"week")
> values <- rnorm(length(dates))
> my.ts <- prepare.ts(dates,values,"week",complete = 0)
> my.bats(my.ts,n_pred=12)
        dates prev.bats.mean prev.bats.inf prev.bats.sup
1  2011-01-01     -0.6182774     -2.335058      1.098503
2  2011-01-08      0.1868826     -1.530015      1.903780
3  2011-01-15      0.2893838     -1.427630      2.006398
4  2011-01-22     -0.5831449     -2.300275      1.133985
5  2011-01-29      0.0179568     -1.699290      1.735204
6  2011-02-05     -0.2504184     -1.967782      1.466945
7  2011-02-12      0.1321482     -1.585331      1.849628
8  2011-02-19      0.5919084     -1.125688      2.309505
9  2011-02-26     -0.5997866     -2.317499      1.117926
10 2011-03-05     -0.1492170     -1.867046      1.568612
11 2011-03-12     -0.1455544     -1.863500      1.572391
12 2011-03-19      0.1650371     -1.553025      1.883099
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("my.bats", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:dplyr’, ‘package:lubridate’

> nameEx("my.ets")
> ### * my.ets
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: my.ets
> ### Title: Fit ETS algorithm and make the prediction
> ### Aliases: my.ets
> 
> ### ** Examples
> 
>  library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> dates <- seq(as_date("2000-01-01"),as_date("2010-12-31"),"month")
> values <- rnorm(length(dates))
> my.ts <- prepare.ts(dates,values,"month",complete = 0)
> my.ets(my.ts,n_pred=12)
        dates prev.ets.mean prev.ets.inf prev.ets.sup
1  2011-01-01    0.09530554    -1.591663     1.782274
2  2011-02-01    0.09530554    -1.591663     1.782274
3  2011-03-01    0.09530554    -1.591663     1.782274
4  2011-04-01    0.09530554    -1.591663     1.782274
5  2011-05-01    0.09530554    -1.591663     1.782274
6  2011-06-01    0.09530554    -1.591663     1.782274
7  2011-07-01    0.09530554    -1.591663     1.782274
8  2011-08-01    0.09530554    -1.591663     1.782274
9  2011-09-01    0.09530554    -1.591663     1.782274
10 2011-10-01    0.09530554    -1.591663     1.782274
11 2011-11-01    0.09530554    -1.591663     1.782274
12 2011-12-01    0.09530554    -1.591663     1.782274
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("my.ets", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:dplyr’, ‘package:lubridate’

> nameEx("my.predictions")
> ### * my.predictions
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: my.predictions
> ### Title: Make predictions with selected algorithms
> ### Aliases: my.predictions
> 
> ### ** Examples
> 
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> dates <- seq(lubridate::as_date("2005-01-01"),lubridate::as_date("2010-12-31"),"month")
> values <- 10+ 1:length(dates)/10 + rnorm(length(dates),mean = 0,sd = 10)
> ### Stand alone usage
> ## Not run: 
> ##D prepare.ts(dates,values,"month") %>%
> ##D   my.predictions(prepedTS = .,algos = list("my.prophet","my.ets"))
> ##D   
> ## End(Not run)
> ### Standard input with bestmodel
> ## Not run: 
> ##D getBestModel(dates,values,freq = "month",n_test = 6) %>%
> ##D   my.predictions()
> ##D   
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("my.predictions", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:dplyr’, ‘package:lubridate’

> nameEx("my.prophet")
> ### * my.prophet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: my.prophet
> ### Title: Fit prophet algorithm and make the prediction
> ### Aliases: my.prophet
> 
> ### ** Examples
> 
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> dates <- seq(as_date("2000-01-01"),as_date("2010-12-31"),"month")
> values <- rnorm(length(dates))
> my.ts <- prepare.ts(dates,values,"month",complete = 0)
> my.prophet(my.ts,n_pred=12)
        dates prev.prophet.mean prev.prophet.inf prev.prophet.sup
1  2011-01-01        0.18985857       -0.8702576        1.2410363
2  2011-02-01        0.13910804       -0.9410984        1.1960042
3  2011-03-01        0.10373621       -1.0601072        1.1111063
4  2011-04-01        0.01456798       -1.0488190        1.0742153
5  2011-05-01        0.07716703       -1.0415300        1.1491844
6  2011-06-01        0.05608560       -1.0053395        1.1312919
7  2011-07-01        0.20420609       -0.8558799        1.2884139
8  2011-08-01        0.58140050       -0.4962041        1.6341263
9  2011-09-01        0.05588060       -1.0715712        1.1160867
10 2011-10-01        0.31089437       -0.7429428        1.3319032
11 2011-11-01        0.58888064       -0.3879608        1.7356476
12 2011-12-01       -0.18603768       -1.3074703        0.8823304
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("my.prophet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:dplyr’, ‘package:lubridate’

> nameEx("my.sarima")
> ### * my.sarima
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: my.sarima
> ### Title: Fit SARIMA algorithm and make the prediction
> ### Aliases: my.sarima
> 
> ### ** Examples
> 
>  library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> dates <- seq(as_date("2000-01-01"),as_date("2010-12-31"),"month")
> values <- rnorm(length(dates))
> my.ts <- prepare.ts(dates,values,"month",complete = 0)
> ## Not run: 
> ##D my.sarima(my.ts,n_pred=12)
> ## End(Not run)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("my.sarima", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:dplyr’, ‘package:lubridate’

> nameEx("my.shortterm")
> ### * my.shortterm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: my.shortterm
> ### Title: Fit short term algorithm and make the prediction
> ### Aliases: my.shortterm
> 
> ### ** Examples
> 
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> dates <- seq(as_date("2000-01-01"),as_date("2010-12-31"),"week")
> values <- rnorm(length(dates))
> my.ts <- prepare.ts(dates,values,"week",complete = 0)
> my.shortterm(my.ts,n_pred=12)
        dates prev.shortterm.mean prev.shortterm.inf prev.shortterm.sup
1  2011-01-01         -0.12924482                 NA                 NA
2  2011-01-08          0.66978965                 NA                 NA
3  2011-01-15         -0.15745116                 NA                 NA
4  2011-01-22          0.03612950                 NA                 NA
5  2011-01-29          1.27510318                 NA                 NA
6  2011-02-05          0.10917274                 NA                 NA
7  2011-02-12         -0.89336643                 NA                 NA
8  2011-02-19         -0.51578781                 NA                 NA
9  2011-02-26         -0.10843174                 NA                 NA
10 2011-03-05          0.90252767                 NA                 NA
11 2011-03-12         -0.88505129                 NA                 NA
12 2011-03-19         -0.05995198                 NA                 NA
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("my.shortterm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:dplyr’, ‘package:lubridate’

> nameEx("my.stlm")
> ### * my.stlm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: my.stlm
> ### Title: Fit STLM algorithm and make the prediction
> ### Aliases: my.stlm
> 
> ### ** Examples
> 
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> dates <- seq(as_date("2000-01-01"),as_date("2010-12-31"),"week")
> values <- rnorm(length(dates))
> my.ts <- prepare.ts(dates,values,"week",complete = 0)
> my.stlm(my.ts,n_pred=12)
        dates prev.stlm.mean prev.stlm.inf prev.stlm.sup
1  2011-01-01   -0.440719908     -2.199904      1.318464
2  2011-01-08    0.561596941     -1.197587      2.320781
3  2011-01-15    0.238258735     -1.520925      1.997443
4  2011-01-22   -0.536619721     -2.295804      1.222564
5  2011-01-29    0.049265472     -1.709918      1.808449
6  2011-02-05   -0.122541256     -1.881725      1.636643
7  2011-02-12    0.279178291     -1.480006      2.038362
8  2011-02-19    0.373914401     -1.385270      2.133098
9  2011-02-26   -0.263215462     -2.022399      1.495968
10 2011-03-05   -0.227372707     -1.986557      1.531811
11 2011-03-12   -0.313056875     -2.072241      1.446127
12 2011-03-19    0.008445679     -1.750738      1.767630
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("my.stlm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:dplyr’, ‘package:lubridate’

> nameEx("my.tbats")
> ### * my.tbats
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: my.tbats
> ### Title: Fit TBATS algorithm and make the prediction
> ### Aliases: my.tbats
> 
> ### ** Examples
> 
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> dates <- seq(as_date("2000-01-01"),as_date("2010-12-31"),"week")
> values <- rnorm(length(dates))
> my.ts <- prepare.ts(dates,values,"week",complete = 0)
> my.tbats(my.ts,n_pred=12)
        dates prev.tbats.mean prev.tbats.inf prev.tbats.sup
1  2011-01-01   -0.0005777056      -1.962911       1.961756
2  2011-01-08   -0.0005777056      -1.962924       1.961769
3  2011-01-15   -0.0005777056      -1.962937       1.961782
4  2011-01-22   -0.0005777056      -1.962950       1.961794
5  2011-01-29   -0.0005777056      -1.962962       1.961807
6  2011-02-05   -0.0005777056      -1.962975       1.961820
7  2011-02-12   -0.0005777056      -1.962988       1.961833
8  2011-02-19   -0.0005777056      -1.963001       1.961845
9  2011-02-26   -0.0005777056      -1.963013       1.961858
10 2011-03-05   -0.0005777056      -1.963026       1.961871
11 2011-03-12   -0.0005777056      -1.963039       1.961884
12 2011-03-19   -0.0005777056      -1.963052       1.961896
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("my.tbats", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:dplyr’, ‘package:lubridate’

> nameEx("prepare.ts")
> ### * prepare.ts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: prepare.ts
> ### Title: Format 2 vectors in a proper object usable by all algorithms
> ### Aliases: prepare.ts
> 
> ### ** Examples
> 
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:lubridate’:

    intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> dates <- seq(lubridate::as_date("2000-01-01"),lubridate::as_date("2010-12-31"),"quarter")
> values <- rnorm(length(dates))
> my.ts <- prepare.ts(dates,values,"month",complete = 0)
> plot(my.ts$obj.ts)
> ggplot(my.ts$obj.df,aes(dates,val)) + geom_line()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("prepare.ts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:ggplot2’, ‘package:dplyr’, ‘package:lubridate’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.612 0.112 5.727 0.001 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
